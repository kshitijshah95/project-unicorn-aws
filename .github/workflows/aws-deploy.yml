# AWS CI/CD Pipeline for Project Unicorn
name: AWS CI/CD Pipeline

# Trigger on pushes to main branch and manual workflow dispatch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - qa
        - prod

# Environment variables
env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: project-unicorn-aws
  ECS_CLUSTER: project-unicorn-cluster-1
  CONTAINER_NAME: project-unicorn-container

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Build application
      run: npm run build
      
    - name: Build and test Docker image locally
      run: |
        docker build -t $ECR_REPOSITORY:test .
        docker run --rm -d -p 3000:3000 --name test-container $ECR_REPOSITORY:test
        sleep 10
        # Basic health check
        curl -f http://localhost:3000 || exit 1
        docker stop test-container

  # Job 2: Deploy to Development (auto on push)
  deploy-dev:
    name: Deploy to Development
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: true

    - name: Build, tag, and push Docker image to ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: dev-${{ github.sha }}
      run: |
        # Build Docker image for dev environment
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:dev-latest .
        
        # Push to ECR with dev tags
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:dev-latest
        
        # Output image URI for next steps
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download current task definition
      run: |
        echo "üìù Getting current task definition..."
        aws ecs describe-task-definition \
          --task-definition project-unicorn-task \
          --region $AWS_REGION \
          --query 'taskDefinition' > task-def.json
        
        # Remove unnecessary fields
        cat task-def.json | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' > clean-task-def.json

    - name: Update task definition with new image
      id: update-task-def
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: dev-${{ github.sha }}
      run: |
        echo "üîÑ Updating task definition with new image..."
        NEW_IMAGE="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "New image URI: $NEW_IMAGE"
        
        # Show current image before update
        echo "Current image in task def:"
        cat clean-task-def.json | jq -r '.containerDefinitions[0].image'
        
        # Update the image URI in the task definition
        cat clean-task-def.json | jq --arg IMAGE "$NEW_IMAGE" '.containerDefinitions[0].image = $IMAGE' > updated-task-def.json
        
        # Verify the update worked
        echo "Updated image in task def:"
        cat updated-task-def.json | jq -r '.containerDefinitions[0].image'
        
        # Register new task definition revision
        echo "üìù Registering new task definition revision..."
        NEW_REVISION=$(aws ecs register-task-definition \
          --cli-input-json file://updated-task-def.json \
          --region $AWS_REGION \
          --query 'taskDefinition.revision' \
          --output text)
        
        echo "New task definition revision: $NEW_REVISION"
        echo "task_revision=$NEW_REVISION" >> $GITHUB_OUTPUT

    - name: Update ECS Service with new task definition
      run: |
        echo "üîÑ Updating ECS service: project-unicorn-service-v2"
        echo "Using task definition: project-unicorn-task:${{ steps.update-task-def.outputs.task_revision }}"
        
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service project-unicorn-service-v2 \
          --task-definition "project-unicorn-task:${{ steps.update-task-def.outputs.task_revision }}" \
          --region $AWS_REGION
        
        echo "‚è≥ Waiting for service to stabilize..."
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services project-unicorn-service-v2 \
          --region $AWS_REGION
    
    - name: Deploy to Dev Environment
      run: |
        echo "üöÄ Deployed to DEV environment!"
        echo "Branch: ${{ github.ref_name }}"
        echo "Domain: dev.unsugar.io (or ALB DNS)"
        echo "Image URI: ${{ steps.build-image.outputs.image }}"
        echo "‚úÖ ECS service updated with latest image!"
        echo "‚úÖ Ready for QA promotion!"

  # Job 3: Manual Promotion to QA/Prod
  promote:
    name: Promote to Environment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment }}
    
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: true

    - name: Promote Image to Environment
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        TARGET_ENV: ${{ github.event.inputs.environment }}
      run: |
        # Get the latest dev image and promote it
        SOURCE_TAG="dev-latest"
        TARGET_TAG="$TARGET_ENV-latest"
        TARGET_COMMIT_TAG="$TARGET_ENV-${{ github.sha }}"
        
        echo "üîÑ Promoting image from dev to $TARGET_ENV"
        
        # Pull the dev image
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$SOURCE_TAG
        
        # Re-tag for target environment
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$SOURCE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$TARGET_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$SOURCE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$TARGET_COMMIT_TAG
        
        # Push promoted images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$TARGET_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$TARGET_COMMIT_TAG
        
        echo "‚úÖ Image promoted to $TARGET_ENV environment!"

    - name: Deploy to Target Environment
      env:
        TARGET_ENV: ${{ github.event.inputs.environment }}
      run: |
        case $TARGET_ENV in
          "qa")
            DOMAIN="qa.unsugar.io"
            SERVICE="project-unicorn-service-qa"
            ;;
          "prod")
            DOMAIN="unsugar.io"
            SERVICE="project-unicorn-service"
            ;;
          *)
            DOMAIN="dev.unsugar.io"
            SERVICE="project-unicorn-service-dev"
            ;;
        esac
        
        echo "üöÄ Promoting to $TARGET_ENV environment!"
        echo "Domain: $DOMAIN"
        echo "Service: $SERVICE"
        echo "‚úÖ Promotion complete!"
